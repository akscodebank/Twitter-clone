{"version":3,"sources":["SidebarOption.js","Sidebar.js","Feed.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","Feed","classsName","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mVAYeA,MATf,YAA+C,EAAtBC,OAAuB,IAAfC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACnC,OACI,yBAAKC,UAAW,sDACZ,kBAACD,EAAD,MACA,4BAAKD,K,gJC8BFG,MArBf,WACI,OACI,yBAAKD,UAAU,WAEX,kBAAC,IAAD,CAAaA,UAAU,wBAEvB,kBAAC,EAAD,CAAeH,QAAM,EAACE,KAAMG,IAAUJ,KAAK,UAC3C,kBAAC,EAAD,CAAeC,KAAMI,IAAYL,KAAK,YACtC,kBAAC,EAAD,CAAeC,KAAMK,IAAuBN,KAAK,kBACjD,kBAAC,EAAD,CAAeC,KAAMM,IAAmBP,KAAK,aAC7C,kBAAC,EAAD,CAAeC,KAAMO,IAAuBR,KAAK,cACjD,kBAAC,EAAD,CAAeC,KAAMQ,IAAaT,KAAK,UACvC,kBAAC,EAAD,CAAeC,KAAMS,IAAkBV,KAAK,YAC5C,kBAAC,EAAD,CAAeC,KAAMU,IAAeX,KAAK,SAGzC,kBAACY,EAAA,EAAD,CAAQC,QAAQ,WAAWX,UAAU,gBAAgBY,WAAS,GAA9D,WCRGC,MAtBf,WACI,OACI,6BAEI,yBAAKC,WAAW,QAChB,uC,YCcGC,MAff,WACE,OAEE,yBAAKf,UAAU,OAEb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCDcgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b2bd9331.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({ active, text ,Icon }) {\r\n    return (\r\n        <div className={\"sidebarOption ${active && 'sidebarOption--active'}\"}>\r\n            <Icon />\r\n            <h2>{text}</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SidebarOption;\r\n\r\n","import React from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from \"@material-ui/icons/Home\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\r\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport ListAltIcon from \"@material-ui/icons/ListAlt\"\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\"\r\nimport { Button } from \"@material-ui/core\";\r\n\r\n\r\n\r\nfunction Sidebar() {\r\n    return(\r\n        <div className=\"sidebar\">\r\n            {/* Twitter icon */ }\r\n            <TwitterIcon className=\"sidebar_twitterIcon\" />\r\n\r\n            <SidebarOption active Icon={HomeIcon} text=\"Hello\"/>\r\n            <SidebarOption Icon={SearchIcon} text=\"Explore\" />\r\n            <SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\"/>   \r\n            <SidebarOption Icon={MailOutlineIcon}   text=\"Messages\" />\r\n            <SidebarOption Icon={BookmarkBorderIcon}    text=\"Bookmarks\" />\r\n            <SidebarOption Icon={ListAltIcon} text=\"Lists\" />\r\n            <SidebarOption Icon={PermIdentityIcon} text=\"Profile\" />\r\n            <SidebarOption Icon={MoreHorizIcon} text=\"More\" />\r\n\r\n            {/* Button --> Tweet */}\r\n            <Button variant=\"outlined\" className=\"sidebar_tweet\" fullWidth>Tweet</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Sidebar;","import React from 'react';\r\n\r\nfunction Feed() {\r\n    return (\r\n        <div>\r\n            {/* Header */}\r\n            <div classsName=\"feed\">\r\n            <h2>Home</h2>\r\n            </div>\r\n\r\n            {/* TweetBox */}\r\n\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Feed;\r\n","import React from \"react\";\nimport Sidebar from \"./Sidebar\";\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    // BEM\n    <div className=\"app\">\n\n      <Sidebar />\n\n      <Feed />\n\n      {/* Widgets*/}\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}